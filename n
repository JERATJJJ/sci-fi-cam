<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Futuristic Camera HUD</title>
    <style>
        body {
            margin: 0;
            overflow: hidden;
            background: black;
        }
        #video {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        #overlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            background: url('https://i.imgur.com/Q3DL5yB.png') no-repeat center center;
            background-size: cover;
        }
        #controls {
            position: absolute;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            display: flex;
            gap: 10px;
        }
        button {
            padding: 10px 20px;
            font-size: 16px;
            background: rgba(0, 255, 255, 0.7);
            border: none;
            color: black;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <video id="video" autoplay playsinline></video>
    <div id="overlay"></div>
    <div id="controls">
        <button id="record">Start Recording</button>
        <button id="stop" disabled>Stop Recording</button>
    </div>
    <script>
        const video = document.getElementById('video');
        const recordBtn = document.getElementById('record');
        const stopBtn = document.getElementById('stop');
        let mediaRecorder;
        let recordedChunks = [];

        navigator.mediaDevices.getUserMedia({ video: true, audio: true })
            .then(stream => {
                video.srcObject = stream;
                mediaRecorder = new MediaRecorder(stream);

                mediaRecorder.ondataavailable = event => {
                    if (event.data.size > 0) recordedChunks.push(event.data);
                };

                mediaRecorder.onstop = () => {
                    const blob = new Blob(recordedChunks, { type: 'video/webm' });
                    const url = URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = 'recorded-video.webm';
                    document.body.appendChild(a);
                    a.click();
                    document.body.removeChild(a);
                };
            });

        recordBtn.onclick = () => {
            recordedChunks = [];
            mediaRecorder.start();
            recordBtn.disabled = true;
            stopBtn.disabled = false;
        };

        stopBtn.onclick = () => {
            mediaRecorder.stop();
            recordBtn.disabled = false;
            stopBtn.disabled = true;
        };
    </script>
</body>
</html>
